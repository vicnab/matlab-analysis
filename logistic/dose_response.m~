function [beta_est mse conc_graph intensity_graph] = dose_response_log4param(conc,intensity,beta0)
% Benjamin Grant, Rice University McDevitt Lab 09/14/2010
% function [beta_est mse conc_graph y_graph] = dose_response_log4param(conc,intensity,beta0)
% conc is the concentrations in original form, not log values and intenisty
% is the corresponding intensity intensity, beta0 is an optional argument   
% containing the guesses for the 4 parameters of logistic curve fitting   
% using the equation 
% intensity = a+b*[(exp(c-d*ln(conc))/(1+exp(c-d*ln(conc))]
% Attempts first to try non competitive binding (assuming beta0 is not given)
% and then attempts to try competetive binding. Only tries the beta0 par
if(nargin <2)
    error('Must enter dependent and independent vraiables', 'MESSAGE')
elseif (nargin == 2)
    slope_est = diff(y)./diff(x);
    beta3 = log(mean(slope_est));
    beta0 = [1 max(y) .001 -1]; %parameter guess
end
options = statset('MaxIter', 100000);
try
    [beta_est,r,J,COVB,mse] = nlinfit(x,y,@log4param, beta0, options);
    competition = 0; 
catch ME
    if (nargin == 2)
        beta0 = [1 max(y) x(find(y == max(y))) 1];
        [beta_est,r,J,COVB,mse] = nlinfit(x,y,@log4param, beta0, options);
        competition = 1;
    else
        disp('supplied beta0 is not allowing for appropriate curve fitting')
        rethrow(ME);
    end
end
    
xlow = log10(min(x))-1;
xhigh = log10(max(x))+1;
x_graph = logspace(xlow,xhigh,1000);
y_graph = log4param(beta_est, x_graph);
semilogx(x,y,'*');
hold on
semilogx(x_graph,y_graph);
hold off
xlabel('Log(concentration)');
ylabel('Intensity');
if(competition)
    title('Sigmoidal fit to competetive dose response curve');
else
    title('Sigmoidal fit to noncompetetive dose response curve');
end
    
